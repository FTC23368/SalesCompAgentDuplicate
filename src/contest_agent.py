# src/contest_agent.py

from langchain_core.messages import SystemMessage, HumanMessage
from pydantic import BaseModel
from src.create_llm_message import create_llm_message

class ContestDecision(BaseModel):
    nextsteps: str
    decision: str

class ContestAgent:
    
    def __init__(self, model):
        """
        Initialize the ContestAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def get_contest_info(self) -> str:
        """
        Retrieve contest information from an external source, e.g., a file.
        
        :return: A string containing the contest rules.
        """
        with open('contestrules.txt', 'r') as file:
            contest_rules = file.read()
        return contest_rules

    def get_contest_url(self) -> str:
        with open('contesturl.txt', 'r') as file:
            contest_url = file.read()
        return contest_url

    def generate_contest_response(self) -> str:
        """
        Generate a response for contest-related queries using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        contest_prompt = f"""
        You are a Sales Commissions expert. Users will ask you about how to start a sales contest.
        You will first decide whether the user needs information about the contest form or contest form URL or the 
        next steps after submitting the form.
        
        If the user wants to start a SPIF or sales contest, return decision as 'Info'.
        If the user has already reviewed information then the next step is to provide them the URL, return decision as 'URLform'.
        Otherwise return decision as 'other' and also provide instructions to the user for the next steps. Tell the user what they 
        should expect as the next steps. If there are no further steps for the user politely thank them and ask them if there 
        is something else that they need help with. Please provide this information as in the field 'nextsteps'
        

        Please follow the contest rules as defined here: 
        {self.get_contest_info()}
           
        """
        
        llm_messages = create_llm_message(contest_prompt)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(ContestDecision).invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        full_response = llm_response
        
        return full_response


    def contest_agent(self, state: dict) -> dict:
        """
        Handle contest-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        #contest_url, full_response = self.generate_contest_response(state['initialMessage'])
        llm_response = self.generate_contest_response()
        
        if llm_response.decision == 'Info':
            user_response = self.get_contest_info()

        elif llm_response.decision == 'URLform':
            user_response = self.get_contest_url()

        else:
            user_response = llm_response.nextsteps


        # Return the updated state with the generated response and the category set to 'contest'

        return {
            "lnode": "contest_agent", 
            "responseToUser": user_response,
            "category": "contest"
        }
