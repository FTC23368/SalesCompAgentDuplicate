# src/contest_agent.py

# Importing required libraries for message handling and data validation
from langchain_core.messages import SystemMessage, HumanMessage
from pydantic import BaseModel
from src.create_llm_message import create_llm_message

# Data model for structuring the LLM's response
class ContestDecision(BaseModel):
    nextsteps: str # Stores the next steps or actions for the user
    decision: str  # Stores the decision type ('Info', 'URLform', 'Other')

class ContestAgent:
    
    def __init__(self, model):
        """
        Initialize the ContestAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def get_contest_info(self) -> str:
        """
        Retrieve contest rules from a text file. Make sure contestrules.txt exists in the root directory.
        
        :return: A string containing the contest rules.
        """
        with open('contestrules.txt', 'r') as file:
            contest_rules = file.read()
        return contest_rules

    def get_contest_url(self) -> str:
        """
        Read and return the contest form URL from a text file. Make sure contesturl.txt exists in the root directory

        :return: A string containing contest URL.
        """
        with open('contesturl.txt', 'r') as file:
            contest_url = file.read()
        return contest_url

    def generate_contest_response(self) -> str:
        """
        Generate a response for contest-related queries using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        contest_prompt = f"""
        You are a Sales Commissions expert. Users will ask you about how to start a SPIF or sales contest. Always maintain 
        a friendly, professional, and helpful tone throughout the interaction.

        Instructions:

        1. Determine the User's Needs:

            Decide whether the user requires:
                - Information about starting a SPIF (Sales Performance Incentive Fund) or sales contest (Decision: 'Info').
                - The URL to the contest form after reviewing initial information (Decision: 'URLform').
                - Other assistance or next steps (Decision: 'Other').
        
        2. Provide Appropriate Assistance Based on the Decision:

            a) If 'Info', offer detailed information on how to initiate a SPIF or sales contest.
            b) If 'URLform', provide the user with the URL to the contest form.
            c) If 'Other':
                - Give clear instructions on the next steps the user should take.
                - Explain what they should expect moving forward.
                - If no further action is required, politely thank the user and ask if they need help with anything else.
                - Include this information in the field labeled 'nextsteps'.
        
        3. Follow Contest Rules: Ensure all information and guidance comply with the contest rules as defined here: {self.get_contest_info()}

        """
        # Create a well-formatted message for LLM by passing the contest_prompt above to create_llm_messages
        llm_messages = create_llm_message(contest_prompt)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(ContestDecision).invoke(llm_messages)
        
        full_response = llm_response
        
        return full_response


    def contest_agent(self, state: dict) -> dict:
        """
        Handle contest-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        llm_response = self.generate_contest_response()
        
        # Determine the appropriate response based on the LLM's decision
        if llm_response.decision == 'Info':
            user_response = self.get_contest_info()

        elif llm_response.decision == 'URLform':
            user_response = self.get_contest_url()

        else:  # Handle 'Other' case
            user_response = llm_response.nextsteps

        # Return the updated state with the generated response and the category set to 'contest'
        return {
            "lnode": "contest_agent", 
            "responseToUser": user_response,
            "category": "contest"
        }
