# src/clarify_agent.py

import streamlit as st
from src.create_llm_message import create_llm_message, create_llm_msg
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, BaseMessage
from src.prompt_store import get_prompt

# When ClarifyAgent object is created, it's initialized with a model. 
# The main entry point is the clarify_agent method. You can see workflow.add_node for clarify_agent node in graph.py

class ClarifyAgent:
    
    def __init__(self, model):
        """
        Initialize the ClarifyAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model
    
    def clarify_and_classify(self, user_query: str, messageHistory: list[BaseMessage]) -> str:
        """
        Generate a response which clarifies user's query using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        # Get clarify prompt from prompt_store.py
        clarify_prompt = get_prompt("clarify").format(user_query=user_query)

        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_msg
        llm_messages = create_llm_msg(clarify_prompt, messageHistory)

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        full_response = llm_response.content
        return full_response
     

    def clarify_agent(self, state: dict) -> dict:
        """
        Handle queries that require clarification and attempt to classify them again.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state based on the user's clarified response.
        """
        # Generate a response based on the user's initial message
        full_response = self.clarify_and_classify(state['initialMessage'], state['message_history'])
        
        # Return the updated state with the generated response and the category set to 'clarify'
        return {
            "lnode": "clarify_agent", 
            "responseToUser": full_response,
            "category": "clarify"
        }
