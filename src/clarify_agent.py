# src/clarify_agent.py

import streamlit as st
from src.create_llm_message import create_llm_message
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage

# When ClarifyAgent object is created, it's initialized with a model. 
# The main entry point is the clarify_agent method. You can see workflow.add_node for clarify_agent node in graph.py

class ClarifyAgent:
    
    def __init__(self, model):
        """
        Initialize the ClarifyAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model
    
    def clarify_and_classify(self, user_query: str) -> dict:
        """
        Generate a response which clarifies user's query using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        clarify_prompt = f"""
        You are an expert with deep knowledge of sales compensation. The user's query was not clear enouugh for you
        to categorize the request. 
        
        Step 1: In a friendly, professional, and helpful tone, ask the user to explain in a little more detail
        what help do they need.

        Step 2: If the user's response is clear, select the appropriate category from "classifier" node.

        Step 3: If the user's response is still NOT clear enough for you to categorize the request, inform the 
        user that you are creating a Sales Comp ticket to get human help.
        
        Step 4: Ask the user if there is anything else they need help with.
             
        """

        # Generate a response using the ChatOpenAI model
        llm_messages = create_llm_message(clarify_prompt)

        llm_response = self.model.invoke(llm_messages)
        
        # Extract and return the full response from the language model's output
        full_response = llm_response.content
        return full_response
     
        

    def clarify_agent(self, state: dict) -> dict:
        """
        Handle queries that require clarification and attempt to classify them again.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state based on the user's clarified response.
        """
        # Generate a response based on the user's initial message
        full_response = self.clarify_and_classify(state['initialMessage'])
        
        # Return the updated state with the generated response and the category set to 'commission'
        return {
            "lnode": "clarify_agent", 
            "responseToUser": full_response,
            "category": "clarify"
        }
