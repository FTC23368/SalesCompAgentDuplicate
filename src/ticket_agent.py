# src/ticket_agent.py

from langchain_core.messages import SystemMessage, HumanMessage, AIMessage, BaseMessage
from src.create_llm_message import create_llm_message, create_llm_msg
from src.send_email import send_email
from pydantic import BaseModel
from typing import Optional
from src.prompt_store import get_prompt

# When TicketAgent object is created, it's initialized with a model. 
# The main entry point is the ticket_agent method. You can see workflow.add_node for ticket_agent node in graph.py

# Define Pydantic models for structured output
class TicketResponse(BaseModel):
    response: str
    createTicket: bool
    email: Optional[str] 

class TicketEmail(BaseModel):
    response: str
    htmlEmail: str
    
class TicketAgent:
    
    def __init__(self, model):
        """
        Initialize the TicketAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def generate_ticket_response(self, state: dict) -> str:
        """
        Generate a response for ticket-related queries using the ChatOpenAI model. 
        
        :param user_query: The original query from the user.
        :return: A string, including response (string) and createTicket (bool) generated by the language model. Please
        note that the 'response' goes to the user in the chat interaction.
        
        """
        user_query = state.get('initialMessage', '')

        # Get the prompt from promp_store.py to generate a response for the user
        ticket_prompt = get_prompt("ticket").format(user_query=user_query)
       
        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_msg
        llm_messages = create_llm_msg(ticket_prompt, state['message_history'])

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(TicketResponse).invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        full_response = llm_response
        
        return full_response

    def generate_ticket_email(self, state: dict) -> str:
        """
        Generate an email as a well-formatted html using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        
        """

        # Get the prompt from prompt_store.py to generate email for the support team
        ticket_email_prompt = get_prompt("ticketemail")

        # Create a well-formatted message for LLM by passing the retrieved information above to create_llm_msg
        llm_messages = create_llm_msg(ticket_email_prompt, state['message_history'])

        # Invoke the model with the well-formatted prompt, including SystemMessage, HumanMessage, and AIMessage
        llm_response = self.model.with_structured_output(TicketEmail).invoke(llm_messages)
        
        # Extract the content attribute from the llm_response object 
        ticket_email_response = llm_response.htmlEmail
        return ticket_email_response

    def ticket_agent(self, state: dict) -> dict:
        """
        Handle ticket-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        full_response = self.generate_ticket_response(state)

        if full_response.createTicket:
            # Generate an email that can be sent to ServiceNow ticketing system
            ticket_email_response = self.generate_ticket_email(state)

            # Send the generated ticket response as an email to the support team
            # Note: to_email in the code below needs to be replaced where you would like the tickets to eventually go.
            send_email('malihajburney@gmail.com', 'i_jahangir@hotmail.com', 'New Ticket from SalesCompAgent', ticket_email_response)
            
        # Return the updated state with the generated response and the category set to 'ticket'.
        return {
            "lnode": "ticket_agent", 
            "responseToUser": full_response.response,
            "category": "ticket"
        }