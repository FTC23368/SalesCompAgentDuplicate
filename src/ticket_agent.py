# src/ticket_agent.py

from langchain_core.messages import SystemMessage, HumanMessage  # Import necessary message classes

class TicketAgent:
    
    def __init__(self, model):
        """
        Initialize the TicketAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def generate_ticket_response(self, user_query: str) -> str:
        """
        Generate a response for ticket-related queries using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        """
        ticket_prompt = f"""
        You are a Sales Commissions expert. Users will ask you about what their commission
        will be for a particular deal. You can assume their on-target incentive to be $100000
        and their annual quota to be $2000000. Also note that Commission is equal to on-target
        incentive divided by annual quota. 
        
        Please provide user commission as well as explain how you computed it.      
        """
        
        # Generate a response using the ChatOpenAI model's invoke method
        llm_response = self.model.invoke([
            SystemMessage(content=ticket_prompt),
            HumanMessage(content=user_query)
        ])
        
        # Extract the response content
        full_response = llm_response.content
        return full_response

    def ticket_agent(self, state: dict) -> dict:
        """
        Handle ticket-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        full_response = self.generate_ticket_response(state['initialMessage'])
        
        # Return the updated state with the generated response and the category set to 'ticket'
        return {
            "lnode": "initial_classifier", 
            "responseToUser": "ServiceNow email address placeholder",
            "category": "ticket"
        }
