# src/ticket_agent.py

from langchain_core.messages import SystemMessage, HumanMessage  # Import necessary message classes
from src.create_llm_message import create_llm_message
from src.send_email import send_email

class TicketAgent:
    
    def __init__(self, model):
        """
        Initialize the TicketAgent with a ChatOpenAI model.
        
        :param model: An instance of the ChatOpenAI model used for generating responses.
        """
        self.model = model

    def generate_ticket_response(self, user_query: str) -> str:
        """
        Generate a response for ticket-related queries using the ChatOpenAI model.
        
        :param user_query: The original query from the user.
        :return: A string response generated by the language model.
        
        Please provide this response as a well-formatted html that can be sent directly in an email.
        """
        ticket_prompt = f"""
        You are not able to solve user's concern. Please create an email message that can be sent to the 
        ticketing system. The email message should include user's name, email address, issue description. 
        Also, summarize why you were not able to resolve it. 
        
        You can use any of the following templates to generate the email message as a well-formatted html that 
        can be sent directly in an email:

        Template 1:
        
        Dear Sales Comp Team,

        I'm your fellow AI agent. I was trying to help out one of the reps but I was not able to resolve the issue.
        I would appreciate if you could look into this and close loop with the rep. I'm including the information
        about this request below:

        Date: <insert date>
        Employee Name: <insert employee name>
        Employee Email: <insert employee email address>
        Issue Description: <insert user query>

        Summary of my chat: <include summary of your chat with the employee>

        Regards,

        AI Agent   
        """
        
        llm_messages = create_llm_message(ticket_prompt)

        # Invoke the model with the classifier prompt
        
        llm_response = self.model.invoke(llm_messages)

        ticket_response = llm_response.content
        
        # Extract the response content
        full_response = llm_response.content
        return full_response

    def ticket_agent(self, state: dict) -> dict:
        """
        Handle ticket-related queries by generating a response using the ChatOpenAI model.
        
        :param state: A dictionary containing the state of the current conversation, including the user's initial message.
        :return: A dictionary with the updated state, including the response and the node category.
        """
        # Generate a response based on the user's initial message
        full_response = self.generate_ticket_response(state['initialMessage'])

        send_email(from_email='malihajburney@gmail.com', to_email='i_jahangir@hotmail.com', 
                   subject='New Ticket from SalesCompAgent', html_content=full_response)
        
        # Return the updated state with the generated response and the category set to 'ticket'
        return {
            "lnode": "initial_classifier", 
            "responseToUser": "ServiceNow email address placeholder",
            "category": "ticket"
        }
